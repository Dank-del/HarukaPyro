[pyrogram]
# Configuration for the Telegram client

api_id = 000
api_hash = jcbscbsbcbcsicsbcscibs
bot_token = 161481:cdvdcjdcudiwdudiw

[plugins]
# Configuration for smart plugins

# Comma-separated list of plugins to load
# (leave include and exclude empty to load
# all modules)
include =
# Comma-separated list of plugins not to load
exclude =
# The root package that contains modules
root = haruka.modules

[proxy]
# Pyrogram's proxy configuration
enabled = False
hostname = 11.22.33.44
port = 1080
username = <your_username>
password = <your_password>

[bot]
# Generic variables needed by the bot

# The Telegram ID of the owner
owner_id = 895373440

[logging]
# Logging configuration as per https://docs.python.org/3/library/logging.html

level = 20
format = [%%(levelname)s - %%(asctime)s] %%(message)s
date_format = %%T %%p

[database]
# Database configuration (PostgreSQL)

# The database connection string (libpq)
db_uri = postgres://cdbhugwfugnwfu:hndc8hfofmfhfwx,f
# The minimum size of the connection pool
min_pool_size = 1
# The maximum size of the connection pool
max_pool_size = 2


[lang]
# Language and translation settings

# To edit translations, check the JSON
# files under locales/

# The default language for the bot
default = en_US


[anti_flood_wait]
# Configuration for the anti flood-wait module

# Note that this module has the sole purpose of
# protecting the BOT from flood-wait and that the
# configuration for flood control inside chats has
# to be performed via the bot itself and cannot
# be changed here

# The minimum amount of seconds between updates that must pass for them
# not to be considered "flood". 1 means that at least one second
# between a message and another must pass for them to be considered
# "legit" traffic. It is not recommended to go below 1, but you can
# experiment for sure
sensibility = 1
# The maximum amount of updates (messages) to accumulate before starting to count
# for flood. Known issues related to how updates are counted occurs
# when this number is not a multiple of 2, so it is recommended to stick
# to even numbers
max_update_threshold = 4
# Since flood is calculated for each pair of updates, it's possible
# that some pairs are flood-detected and some are not: this would
# allow a user to flood indefinitely by slowing down at the last
# message, for example. This parameter serves to mitigate that issue:
# its purpose is to set a threshold to how many pairs the system must
# detect as flood to actually block a user. It must be a number between
# 1 and 100 to work properly (1 meaning at least 1% of updates must be
# flood detected, 100% means that ALL updates must be flood detected)
# Note that percentages are rounded, which means that if the calculated
# % is, for instance, 2.25 and 2 updates are flood-detected the user
# will be blocked
flood_percentage = 75
# The amount of seconds to ban a user for, after it has flooded.
# Users are unbanned in a "lazy" way, which means they won't be
# removed from the flood filter even if their ban has expired
# until they send a new message
ban_time = 30
# If you want to delete the incriminated messages after detecting
# flood, set this to true
delete_messages = true
# This notice will be sent to users if they flood, set to
# an value to disable the notice
flood_notice = "Hey! I don't like your flooding, I'll give you some time to think!"
# The rate (in seconds) at which the background scheduler should try to purge
# the antiflood's local storage to keep memory usage under control
purge_polling_rate = 300
# The minimum amount of time, in seconds, that must pass since the last user message
# for it to be considered inactive and be purged
inactive_threshold = 250
